/*
 * File: app/controller/HighStockExtend.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.HighStockExtend', {
    extend: 'Ext.app.Controller',

    init: function(application) {
        //ZoomOut Events.
        (function (H) {
            H.wrap(H.Chart.prototype, 'init', function (proceed) {
                // Run the original proceed method
                proceed.apply(this, Array.prototype.slice.call(arguments, 1));
                var chart = this,
                    options = chart.options,
                    zoomType = options.chart.zoomType,
                    container = chart.container,
                    xAxis = chart.xAxis[0],
                    selectFromPixels,
                    selectToPixels,
                    pixelDiff;


                if (zoomType === 'x') {

                    H.addEvent(container, 'mousedown', function (e) {
                        selectFromPixels = chart.pointer.normalize(e).chartX;
                    });

                    H.addEvent(container, 'mouseup', function (e) {
                        selectToPixels = chart.pointer.normalize(e).chartX;
                        pixelDiff = selectToPixels - selectFromPixels;
                    });

                    H.addEvent(chart, 'selection', function (e) {
                        console.log(e);
                        if (pixelDiff < 0) {
                            var min=e.xAxis[0].min;
                            var max=e.xAxis[0].max;
                            var sel_dist=max-min;

                            var newMin=min-5*sel_dist;
                            var newMax=max+5*sel_dist;

                            if (chart.options.navigator.enabled){
                                var nav;
                                for (serie in chart.series){
                                    nav=chart.series[serie];
                                    if (chart.series[serie].name=="Navigator"){break;}
                                }
                                //var nav=chart.series[chart.series.length-1];
                                var navMin=nav.xAxis.min;
                                var navMax=nav.xAxis.max;

                                if(navMin > newMin) newMin=navMin;
                                if(navMax < newMax) newMax=navMax;
                            }

                            xAxis.setExtremes(newMin, newMax);

                            e.preventDefault();
                        }
                    });
                }
            });
        }(Highcharts));


        //Legend highlight events.
        (function (H) {
            var each = H.each;
            H.wrap(H.Legend.prototype, 'renderItem', function (proceed, item) {

                proceed.call(this, item);
                var isPoint = !!item.series,
                    collection = isPoint ? item.series.points : this.chart.series,
                    groups = isPoint ? ['graphic'] : ['group', 'markerGroup'],
                    element = item.legendGroup.element;

                element.onmouseover = function () {
                    each(collection, function (seriesItem) {
                        if (seriesItem !== item) {
                            each(groups, function (group) {
                                seriesItem[group].animate({
                                    opacity: 0.0
                                }, {
                                    duration: 150
                                });
                            });
                        }
                    });
                };
                element.onmouseout = function () {
                    each(collection, function (seriesItem) {
                        if (seriesItem !== item) {
                            each(groups, function (group) {
                                seriesItem[group].animate({
                                    opacity: 1
                                }, {
                                    duration: 50
                                });
                            });
                        }
                    });
                };

            });
        }(Highcharts));
    }

});
