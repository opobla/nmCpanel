/*
 * File: app/controller/SpikeRevised.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.SpikeRevised', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'navigationPanel',
            selector: '#NavigationPanel'
        },
        {
            ref: 'SpikeRevised_Candle_Panel',
            selector: '#SpikeRevised_Candle_Panel'
        },
        {
            ref: 'SpikeRevised_Channel_Panel',
            selector: '#SpikeRevised_Channel_Panel'
        }
    ],

    Launch: function() {
        this.app={};

        this.app.candle={};
        this.app.candle.panel=this.getSpikeRevised_Candle_Panel().down("#SpikeRevised_Candle_Chart_Panel");
        this.app.candle.height=this.app.candle.panel.getHeight();
        this.app.candle.width=this.app.candle.panel.getWidth();
        this.app.candle.N_points=Math.round(this.app.candle.width/4);
        this.app.candle.mode=0;
        this.app.candle.letter=65;  //ASCII 'A'
        this.app.candle.panelGrid=this.getSpikeRevised_Candle_Panel().down("#SpikeRevised_Candle_Grid_Panel");
        this.app.candle.grid=this.app.candle.panelGrid.down('#SpikeRevised_MarkedGrid');


        this.app.channel={};
        this.app.channel.panel=this.getSpikeRevised_Channel_Panel();
        this.app.channel.height=this.app.candle.height;
        this.app.channel.width=this.app.candle.width;
        /*This panel is not expanded at this point so its weight and height are 0.*/
        /*Thats why we use the values fron the previos panel.*/

        /*Import all the needed methids from Spike*/
        var Spike = MyApp.app.controllers.get("Spike");
        this.initCandleChart=Spike.initCandleChart;
        this.initChannelChart=Spike.initChannelChart;
        this.changeSeries=Spike.changeSeries;
        this.searchInterval=Spike.searchInterval;
        this.updateChannelData=Spike.updateChannelData;
        this.LineOrOhcl=Spike.LineOrOhcl;
        this.updateMode=Spike.updateMode;
        this.updateSeries=Spike.updateSeries;
        this.getTimestamp=Spike.getTimestamp;

        this.loadInitialData();

    },

    loadInitialData: function() {
        this.app.candle.panel.setLoading(true);

        Ext.Ajax.request({
            url: '/nmdb/revised/group/all/all/'+ this.app.candle.N_points,
            success: function(response){
                var text = response.responseText;
                var data=Ext.JSON.decode(text);
                this.app.candle.data=data;

                this.initCandleChart();
                this.initChannelChart();
                this.ExtendCandleChart();

                this.app.candle.panel.setLoading(false);
            },
            scope: this
        });
    },

    ExtendCandleChart: function() {
        this.app.candle.chart.addSeries({
            name : 'Flags',                    //8
            type: 'flags',
            data: null,
            yAxis: 1,
            shape: 'squarepin',
            /*Todo. add id to this series and use it to refer to this series, not the magician 8 I'm using currently. */
            width : 16});

        function click(event){
            for (var i=0;i<this.app.candle.data[0].length;i++){
                if (this.app.candle.data[0][i][0]==event.point.x){
                    break;
                }
            }
            var ClickedData=[this.app.candle.data[0][i][0] , this.app.candle.data[0][i][1] , this.app.candle.data[1][i][1], this.app.candle.data[2][i][1] , this.app.candle.data[3][i][1]];
            this.app.candle.chart.series[8].addPoint({x:event.point.x,title:String.fromCharCode(this.app.candle.letter)});

            this.app.candle.chart.redraw();

            this.app.candle.grid.store.add({
                "label": String.fromCharCode(this.app.candle.letter),
                "start_date_time": new Date(ClickedData[0]+new Date(ClickedData[0]).getTimezoneOffset()*60*1000),
                "un": ClickedData[1],
                "ce": ClickedData[2],
                "cp": ClickedData[3],
                "pr": ClickedData[4],
                "ver": 0});

            this.app.candle.letter+=1;
            if(this.app.letter==91)this.app.candle.letter=97;
            if(this.app.letter==123)this.app.candle.letter=65;
        }
        click=click.bind(this);

        /*Add the click event to the line series...*/
        $(this.app.candle.chart.series[3]).on('click', click);
        $(this.app.candle.chart.series[4]).on('click', click);
        $(this.app.candle.chart.series[5]).on('click', click);


    },

    updateCandleData: function(start, finish) {
        start=Math.round(start/1000);
        finish=Math.round(finish/1000);
        this.updateMode(start, finish);

        var my_url=null;
        if (this.LineOrOhcl(start, finish, this.app.candle.N_points)){
            my_url='/nmdb/revised/raw/'+start+'/'+finish;
            Ext.ComponentQuery.query('#SpikeRevisedChannelChart')[0].enable(true);
        }else{
            my_url='/nmdb/revised/group/'+start+'/'+finish+'/'+this.app.candle.N_points;
            Ext.ComponentQuery.query('#SpikeRevisedChannelChart')[0].disable(true);
        }

        this.app.candle.chart.showLoading('Loading data from server...');
        Ext.Ajax.request({
                url: my_url,
                success: function(response){
                    var text = response.responseText;
                    var data=Ext.JSON.decode(text);

                    this.app.candle.data=data;
                    this.updateSeries();

                    this.app.candle.chart.hideLoading();

                },
                scope: this
            });

    },

    removeFromGrid: function(rowIndex) {
        //First of all start getting a reference of the grid.
        var markedGrid=this.app.candle.grid;

        //Then get a reference of the tagSeries
        var tagSeries = this.app.candle.chart.series[8].data;

        //Find the tag in the tagSeries and remove it from the tagSeries
        for(x=0;x<tagSeries.length;x++){
            if(tagSeries[x].title==markedGrid.store.getAt(rowIndex).data.label){
                tagSeries[x].remove(true);
                break;
            }
        }

        //Finaly remove from the grids store.
        markedGrid.store.removeAt(rowIndex);
    },

    submitGrid: function() {
        //Http post request to the specified url.
        //Post params ==> markedGrid data
        this.app.candle.grid.store.sync({
            url: '/nmdb/marknull',
            //Actions we take when the request is successful.
            success: function(response){
                var text = response.operations[0].request.scope.reader.jsonData;

                //Clear and refresh store ==> Expexted empty store..
                this.app.candle.grid.store.clearData();
                this.app.candle.grid.getView().refresh();

                //Clear tags from the chart and refresh the chart with the new data
                this.app.candle.chart.series[8].setData([]);
                this.app.candle.chart.xAxis[0].setExtremes();
                this.app.candle.letter=65;

                //Alert everything went ok..
                Ext.Msg.alert(text.messege);
            },
            scope: this
        });
    },

    showHideGrid: function() {
        if (!this.app.candle.panelGrid.isVisible()){
            this.app.candle.panelGrid.setHeight(300);
            this.app.candle.panelGrid.setWidth(600);
            this.app.candle.panelGrid.setPosition(this.app.candle.width -600 -10, 10);
            this.app.candle.panelGrid.show();
        }else{
            this.app.candle.panelGrid.hide();
        }
    },

    clearGrid: function() {
        this.app.candle.chart.series[8].setData([]);
        this.app.candle.grid.store.removeAll();
        this.app.candle.letter=65;

    },

    showCandle: function() {
        this.getNavigationPanel().getLayout().setActiveItem(this.getSpikeRevised_Candle_Panel());
        Ext.ComponentQuery.query('#Controls')[0].down('#SpikeRevisedControls').down('#SpikeRevisedIntervalSearch').show(true);
        Ext.ComponentQuery.query('#Controls')[0].down('#SpikeRevisedControls').down('#SpikeRevisedChoiceSeries').show(true);
        Ext.ComponentQuery.query('#Controls')[0].down('#SpikeRevisedControls').down('#SpikeRevisedShowGrid').show(true);
        Ext.ComponentQuery.query('#Controls')[0].down('#SpikeRevisedControls').expand();

        if (!this.app)
           this.Launch();



    },

    showChannel: function() {
        this.getNavigationPanel().getLayout().setActiveItem(this.app.channel.panel);
        Ext.ComponentQuery.query('#Controls')[0].down('#SpikeRevisedControls').down('#SpikeRevisedIntervalSearch').hide(true);
        Ext.ComponentQuery.query('#Controls')[0].down('#SpikeRevisedControls').down('#SpikeRevisedChoiceSeries').hide(true);
        Ext.ComponentQuery.query('#Controls')[0].down('#SpikeRevisedControls').down('#SpikeRevisedShowGrid').hide(true);
        this.updateChannelData();




    }

});
